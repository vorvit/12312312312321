#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ IFC Auth System
–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
"""

import subprocess
import sys
import time
import os
import signal
import threading
from pathlib import Path

class ServiceManager:
    def __init__(self):
        self.processes = []
        self.running = True
        
    def start_docker_services(self):
        """–ó–∞–ø—É—Å–∫ Docker —Å–µ—Ä–≤–∏—Å–æ–≤ (PostgreSQL, Redis, MinIO)"""
        print("üê≥ –ó–∞–ø—É—Å–∫ Docker —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Docker –∑–∞–ø—É—â–µ–Ω
            result = subprocess.run(['docker', '--version'], capture_output=True, text=True)
            if result.returncode != 0:
                print("‚ùå Docker –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Desktop.")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é Docker Compose
            compose_result = subprocess.run(['docker-compose', '--version'], capture_output=True, text=True)
            if compose_result.returncode != 0:
                print("‚ùå Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Desktop.")
                return False
                
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
            result = subprocess.run([
                'docker-compose', 'up', '-d'
            ], capture_output=True, text=True)
            
            if result.returncode == 0:
                print("‚úÖ Docker —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
                print("   - PostgreSQL: localhost:5433")
                print("   - Redis: localhost:6380") 
                print("   - MinIO: localhost:9000 (Console: localhost:9001)")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Docker —Å–µ—Ä–≤–∏—Å–æ–≤: {result.stderr}")
                return False
                
        except FileNotFoundError:
            print("‚ùå Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Desktop.")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return False
    
    def wait_for_services(self):
        """–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤"""
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Docker —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
        services = [
            ('PostgreSQL', 'localhost', 5433),
            ('Redis', 'localhost', 6380),
            ('MinIO', 'localhost', 9000)
        ]
        
        for service_name, host, port in services:
            print(f"   ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {service_name}...")
            if self.wait_for_port(host, port, timeout=30):
                print(f"   ‚úÖ {service_name} –≥–æ—Ç–æ–≤")
            else:
                print(f"   ‚ùå {service_name} –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
                return False
        
        print("‚úÖ –í—Å–µ Docker —Å–µ—Ä–≤–∏—Å—ã –≥–æ—Ç–æ–≤—ã")
        return True
    
    def wait_for_port(self, host, port, timeout=30):
        """–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞"""
        import socket
        
        for attempt in range(timeout):
            try:
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(1)
                result = sock.connect_ex((host, port))
                sock.close()
                
                if result == 0:
                    return True
            except:
                pass
            
            time.sleep(1)
        
        return False
    
    def start_auth_service(self):
        """–ó–∞–ø—É—Å–∫ Auth Service (FastAPI)"""
        print("üîê –ó–∞–ø—É—Å–∫ Auth Service...")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º FastAPI —Å–µ—Ä–≤–µ—Ä
            process = subprocess.Popen([
                sys.executable, 'start.py'
            ], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            
            self.processes.append(('Auth Service', process))
            
            # –î–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–æ—Ü–µ—Å—Å—É –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
            time.sleep(3)
            
            # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Auth Service (–±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î)
            print("   ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Auth Service...")
            if self.wait_for_service('http://localhost:8000', 'Auth Service', timeout=60):
                print("‚úÖ Auth Service –≥–æ—Ç–æ–≤ –Ω–∞ http://localhost:8000")
                return True
            else:
                print("‚ùå Auth Service –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (timeout 60s)")
                return False
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Auth Service: {e}")
            return False
    
    def start_viewer_service(self):
        """–ó–∞–ø—É—Å–∫ TSP Viewer (Vite)"""
        print("üé® –ó–∞–ø—É—Å–∫ TSP Viewer...")
        
        try:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é TSP
            tsp_dir = Path('TSP')
            if not tsp_dir.exists():
                print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è TSP –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É npm –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –û–°
            npm_cmd = self.get_npm_command()
            if not npm_cmd:
                return False
                
            # –ó–∞–ø—É—Å–∫–∞–µ–º Vite —Å–µ—Ä–≤–µ—Ä
            process = subprocess.Popen([
                npm_cmd, 'run', 'dev'
            ], cwd=tsp_dir, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            
            self.processes.append(('TSP Viewer', process))
            
            # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ TSP Viewer
            print("   ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ TSP Viewer...")
            if self.wait_for_service('http://localhost:5174', 'TSP Viewer'):
                print("‚úÖ TSP Viewer –≥–æ—Ç–æ–≤ –Ω–∞ http://localhost:5174")
                return True
            else:
                print("‚ùå TSP Viewer –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
                return False
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ TSP Viewer: {e}")
            return False
    
    def get_npm_command(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã npm –¥–ª—è —Ç–µ–∫—É—â–µ–π –û–°"""
        import platform
        
        # –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ npm
        npm_commands = [
            'npm',
            'npm.cmd',  # Windows
            'npx',
            'npx.cmd'   # Windows
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –∫–æ–º–∞–Ω–¥—É
        for cmd in npm_commands:
            try:
                result = subprocess.run([cmd, '--version'], 
                                      capture_output=True, text=True, timeout=5)
                if result.returncode == 0:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω npm: {cmd}")
                    return cmd
            except (FileNotFoundError, subprocess.TimeoutExpired):
                continue
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ shell
        if platform.system() == "Windows":
            try:
                # –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ cmd
                result = subprocess.run(['cmd', '/c', 'npm', '--version'], 
                                      capture_output=True, text=True, timeout=5)
                if result.returncode == 0:
                    print("‚úÖ –ù–∞–π–¥–µ–Ω npm —á–µ—Ä–µ–∑ cmd")
                    return ['cmd', '/c', 'npm']
            except (FileNotFoundError, subprocess.TimeoutExpired):
                pass
        
        print("‚ùå npm –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Node.js")
        print("   –°–∫–∞—á–∞–π—Ç–µ —Å: https://nodejs.org/")
        return None
    
    def wait_for_service(self, url, service_name, timeout=30):
        """–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞"""
        import requests
        import socket
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ—Ä—Ç –∏–∑ URL
        port = url.split(':')[-1].split('/')[0]
        
        for attempt in range(timeout):
            try:
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å–ª—É—à–∞–µ—Ç –ª–∏ –ø–æ—Ä—Ç
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(1)
                result = sock.connect_ex(('localhost', int(port)))
                sock.close()
                
                if result == 0:
                    # –ü–æ—Ä—Ç —Å–ª—É—à–∞–µ—Ç—Å—è, –ø—Ä–æ–±—É–µ–º HTTP –∑–∞–ø—Ä–æ—Å
                    response = requests.get(url, timeout=2)
                    if response.status_code == 200:
                        return True
            except (requests.exceptions.RequestException, socket.error, ValueError):
                pass
            
            time.sleep(1)
            if attempt % 5 == 0 and attempt > 0:
                print(f"   ‚è≥ {service_name} –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤... ({attempt}s)")
        
        return False
    
    def check_dependencies(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python –ø–∞–∫–µ—Ç—ã
        try:
            import fastapi
            import uvicorn
            import sqlalchemy
            print("‚úÖ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        except ImportError as e:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {e}")
            print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install -r requirements.txt")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Node.js
        try:
            result = subprocess.run(['node', '--version'], capture_output=True, text=True)
            if result.returncode == 0:
                print("‚úÖ Node.js —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            else:
                print("‚ùå Node.js –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        except FileNotFoundError:
            print("‚ùå Node.js –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º npm
        npm_cmd = self.get_npm_command()
        if not npm_cmd:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º npm –ø–∞–∫–µ—Ç—ã –≤ TSP
        tsp_dir = Path('TSP')
        if tsp_dir.exists():
            node_modules = tsp_dir / 'node_modules'
            if not node_modules.exists():
                print("‚ùå npm –ø–∞–∫–µ—Ç—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ TSP")
                print("   –í—ã–ø–æ–ª–Ω–∏—Ç–µ: cd TSP && npm install")
                return False
            else:
                print("‚úÖ npm –ø–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
        return True
    
    def signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
        self.running = False
        self.stop_all_services()
        sys.exit(0)
    
    def stop_all_services(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        for name, process in self.processes:
            try:
                print(f"   –û—Å—Ç–∞–Ω–æ–≤–∫–∞ {name}...")
                process.terminate()
                process.wait(timeout=5)
                print(f"   ‚úÖ {name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except subprocess.TimeoutExpired:
                print(f"   ‚ö†Ô∏è  –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ {name}...")
                process.kill()
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ {name}: {e}")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker —Å–µ—Ä–≤–∏—Å—ã
        try:
            subprocess.run(['docker-compose', 'down'], capture_output=True)
            print("‚úÖ Docker —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker: {e}")
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫ IFC Auth System")
        print("=" * 50)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        if not self.check_dependencies():
            print("‚ùå –ù–µ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            return False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Docker —Å–µ—Ä–≤–∏—Å—ã
        if not self.start_docker_services():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Docker —Å–µ—Ä–≤–∏—Å—ã")
            return False
        
        # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
        if not self.wait_for_services():
            print("‚ùå –ù–µ –≤—Å–µ Docker —Å–µ—Ä–≤–∏—Å—ã –≥–æ—Ç–æ–≤—ã")
            return False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Auth Service
        if not self.start_auth_service():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Auth Service")
            return False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º TSP Viewer
        if not self.start_viewer_service():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å TSP Viewer")
            return False
        
        print("\n" + "=" * 50)
        print("üéâ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:")
        print("   üîê Auth Service: http://localhost:8000")
        print("   üé® TSP Viewer: http://localhost:5174")
        print("   üóÑÔ∏è  PostgreSQL: localhost:5433")
        print("   üîÑ Redis: localhost:6380")
        print("   üì¶ MinIO: localhost:9000")
        print("\nüí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        print("=" * 50)
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        try:
            while self.running:
                time.sleep(1)
        except KeyboardInterrupt:
            self.signal_handler(signal.SIGINT, None)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    manager = ServiceManager()
    try:
        manager.run()
    except KeyboardInterrupt:
        print("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        manager.stop_all_services()

if __name__ == "__main__":
    main()
