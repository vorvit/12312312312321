#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –±–µ–∑ Docker (—Ç–æ–ª—å–∫–æ Auth Service –∏ TSP Viewer)
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ Docker –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
"""

import subprocess
import sys
import os
import signal
import time
from pathlib import Path

class NoDockerServiceManager:
    def __init__(self):
        self.processes = []
        self.running = True
        
    def signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
        self.running = False
        self.stop_all_services()
        sys.exit(0)
    
    def stop_all_services(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        for name, process in self.processes:
            try:
                print(f"   –û—Å—Ç–∞–Ω–æ–≤–∫–∞ {name}...")
                process.terminate()
                process.wait(timeout=5)
                print(f"   ‚úÖ {name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except subprocess.TimeoutExpired:
                print(f"   ‚ö†Ô∏è  –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ {name}...")
                process.kill()
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ {name}: {e}")
    
    def check_dependencies(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python –ø–∞–∫–µ—Ç—ã
        try:
            import fastapi
            import uvicorn
            import sqlalchemy
            print("‚úÖ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        except ImportError as e:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {e}")
            print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install -r requirements.txt")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Node.js
        try:
            result = subprocess.run(['node', '--version'], capture_output=True, text=True)
            if result.returncode == 0:
                print("‚úÖ Node.js —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            else:
                print("‚ùå Node.js –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        except FileNotFoundError:
            print("‚ùå Node.js –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º npm –ø–∞–∫–µ—Ç—ã –≤ TSP
        tsp_dir = Path('TSP')
        if tsp_dir.exists():
            node_modules = tsp_dir / 'node_modules'
            if not node_modules.exists():
                print("‚ùå npm –ø–∞–∫–µ—Ç—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ TSP")
                print("   –í—ã–ø–æ–ª–Ω–∏—Ç–µ: cd TSP && npm install")
                return False
            else:
                print("‚úÖ npm –ø–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
        return True
    
    def start_auth_service(self):
        """–ó–∞–ø—É—Å–∫ Auth Service (FastAPI)"""
        print("üîê –ó–∞–ø—É—Å–∫ Auth Service...")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º FastAPI —Å–µ—Ä–≤–µ—Ä
            process = subprocess.Popen([
                sys.executable, 'start.py'
            ], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            
            self.processes.append(('Auth Service', process))
            print("‚úÖ Auth Service –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Auth Service: {e}")
            return False
    
    def start_viewer_service(self):
        """–ó–∞–ø—É—Å–∫ TSP Viewer (Vite)"""
        print("üé® –ó–∞–ø—É—Å–∫ TSP Viewer...")
        
        try:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é TSP
            tsp_dir = Path('TSP')
            if not tsp_dir.exists():
                print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è TSP –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É npm –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –û–°
            npm_cmd = self.get_npm_command()
            if not npm_cmd:
                return False
                
            # –ó–∞–ø—É—Å–∫–∞–µ–º Vite —Å–µ—Ä–≤–µ—Ä
            process = subprocess.Popen([
                npm_cmd, 'run', 'dev'
            ], cwd=tsp_dir, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            
            self.processes.append(('TSP Viewer', process))
            print("‚úÖ TSP Viewer –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:5174")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ TSP Viewer: {e}")
            return False
    
    def get_npm_command(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã npm –¥–ª—è —Ç–µ–∫—É—â–µ–π –û–°"""
        import platform
        
        # –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ npm
        npm_commands = [
            'npm',
            'npm.cmd',  # Windows
            'npx',
            'npx.cmd'   # Windows
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –∫–æ–º–∞–Ω–¥—É
        for cmd in npm_commands:
            try:
                result = subprocess.run([cmd, '--version'], 
                                      capture_output=True, text=True, timeout=5)
                if result.returncode == 0:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω npm: {cmd}")
                    return cmd
            except (FileNotFoundError, subprocess.TimeoutExpired):
                continue
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ shell
        if platform.system() == "Windows":
            try:
                # –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ cmd
                result = subprocess.run(['cmd', '/c', 'npm', '--version'], 
                                      capture_output=True, text=True, timeout=5)
                if result.returncode == 0:
                    print("‚úÖ –ù–∞–π–¥–µ–Ω npm —á–µ—Ä–µ–∑ cmd")
                    return ['cmd', '/c', 'npm']
            except (FileNotFoundError, subprocess.TimeoutExpired):
                pass
        
        print("‚ùå npm –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Node.js")
        print("   –°–∫–∞—á–∞–π—Ç–µ —Å: https://nodejs.org/")
        return None
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫ IFC Auth System (–±–µ–∑ Docker)")
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ Docker —Å–µ—Ä–≤–∏—Å–æ–≤")
        print("=" * 60)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        if not self.check_dependencies():
            print("‚ùå –ù–µ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            return False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Auth Service
        if not self.start_auth_service():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Auth Service")
            return False
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
        time.sleep(2)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º TSP Viewer
        if not self.start_viewer_service():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å TSP Viewer")
            return False
        
        print("\n" + "=" * 60)
        print("üéâ –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã!")
        print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:")
        print("   üîê Auth Service: http://localhost:8000")
        print("   üé® TSP Viewer: http://localhost:5174")
        print("\n‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç Docker —Å–µ—Ä–≤–∏—Å—ã:")
        print("   üóÑÔ∏è  PostgreSQL (–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö)")
        print("   üîÑ Redis (–∫—ç—à)")
        print("   üì¶ MinIO (—Ñ–∞–π–ª–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ)")
        print("\nüí° –î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python start_all_services.py")
        print("üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        print("=" * 60)
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        try:
            while self.running:
                time.sleep(1)
        except KeyboardInterrupt:
            self.signal_handler(signal.SIGINT, None)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    manager = NoDockerServiceManager()
    try:
        manager.run()
    except KeyboardInterrupt:
        print("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        manager.stop_all_services()

if __name__ == "__main__":
    main()
